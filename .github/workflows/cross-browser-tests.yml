name: Cross-Browser Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/client/**'
      - '.github/workflows/cross-browser-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/client/**'
      - '.github/workflows/cross-browser-tests.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build and setup
  setup:
    name: Setup and Build
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=build-${{ hashFiles('apps/client/package-lock.json', 'apps/client/src/**', 'apps/client/public/**') }}" >> $GITHUB_OUTPUT

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            build-${{ hashFiles('apps/client/package-lock.json') }}

      - name: Install dependencies
        working-directory: apps/client
        run: npm ci

      - name: Build application
        working-directory: apps/client
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: apps/client/dist/
          retention-days: 1

  # Core cross-browser tests
  cross-browser-core:
    name: Core Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit, msedge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install Playwright browsers
        working-directory: apps/client
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Run core tests
        working-directory: apps/client
        run: npx playwright test tests/e2e/core/ --project=${{ matrix.browser }} --reporter=html,junit
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: core-test-results-${{ matrix.browser }}
          path: |
            apps/client/test-results/
            apps/client/playwright-report/
          retention-days: 7

  # Performance tests
  performance-tests:
    name: Performance Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install Playwright browsers
        working-directory: apps/client
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Run performance tests
        working-directory: apps/client
        run: npx playwright test tests/e2e/performance/ --project=${{ matrix.browser }} --reporter=junit
        env:
          CI: true

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.browser }}
          path: apps/client/test-results/
          retention-days: 7

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install Playwright browsers
        working-directory: apps/client
        run: npx playwright install chromium --with-deps

      - name: Run accessibility tests
        working-directory: apps/client
        run: npx playwright test tests/e2e/accessibility/ --project=accessibility --reporter=junit
        env:
          CI: true

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: apps/client/test-results/
          retention-days: 7

  # Visual regression tests
  visual-regression:
    name: Visual Regression - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install Playwright browsers
        working-directory: apps/client
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Run visual tests
        working-directory: apps/client
        run: npx playwright test tests/e2e/visual/ --project=${{ matrix.browser }} --reporter=junit
        env:
          CI: true

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: visual-results-${{ matrix.browser }}
          path: |
            apps/client/test-results/
            apps/client/test-results-visual/
          retention-days: 7

  # Mobile tests
  mobile-tests:
    name: Mobile Tests - ${{ matrix.device }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        device: ["Mobile Chrome", "Mobile Safari"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install Playwright browsers
        working-directory: apps/client
        run: npx playwright install --with-deps

      - name: Run mobile tests
        working-directory: apps/client
        run: npx playwright test tests/e2e/core/ --project="${{ matrix.device }}" --reporter=junit
        env:
          CI: true

      - name: Upload mobile test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mobile-results-${{ matrix.device }}
          path: apps/client/test-results/
          retention-days: 7

  # Browser compatibility tests
  browser-compatibility:
    name: Browser Compatibility
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'apps/client/package-lock.json'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            apps/client/dist
            apps/client/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install Playwright browsers
        working-directory: apps/client
        run: npx playwright install --with-deps

      - name: Run compatibility tests
        working-directory: apps/client
        run: npx playwright test tests/e2e/browser-specific/ --reporter=junit
        env:
          CI: true

      - name: Upload compatibility results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: compatibility-results
          path: apps/client/test-results/
          retention-days: 7

  # Collect and report results
  report-results:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [cross-browser-core, performance-tests, accessibility-tests, visual-regression, mobile-tests, browser-compatibility]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Generate combined report
        run: |
          echo "# Cross-Browser Test Results" > test-summary.md
          echo "## Test Execution Summary" >> test-summary.md
          echo "- Core Tests: $(ls test-artifacts/core-test-results-* | wc -l) browsers" >> test-summary.md
          echo "- Performance Tests: $(ls test-artifacts/performance-results-* | wc -l) browsers" >> test-summary.md
          echo "- Accessibility Tests: Completed" >> test-summary.md
          echo "- Visual Regression: $(ls test-artifacts/visual-results-* | wc -l) browsers" >> test-summary.md
          echo "- Mobile Tests: $(ls test-artifacts/mobile-results-* | wc -l) devices" >> test-summary.md
          echo "- Compatibility Tests: Completed" >> test-summary.md
          
          echo "" >> test-summary.md
          echo "## Browser Matrix Results" >> test-summary.md
          echo "| Browser | Core | Performance | Visual | Status |" >> test-summary.md
          echo "|---------|------|-------------|--------|--------|" >> test-summary.md
          
          for browser in chromium firefox webkit msedge; do
            core_status="❌"
            perf_status="❌"
            visual_status="❌"
            
            if [ -d "test-artifacts/core-test-results-${browser}" ]; then
              core_status="✅"
            fi
            if [ -d "test-artifacts/performance-results-${browser}" ]; then
              perf_status="✅"
            fi
            if [ -d "test-artifacts/visual-results-${browser}" ]; then
              visual_status="✅"
            fi
            
            overall_status="✅"
            if [ "$core_status" = "❌" ] || [ "$perf_status" = "❌" ]; then
              overall_status="❌"
            fi
            
            echo "| $browser | $core_status | $perf_status | $visual_status | $overall_status |" >> test-summary.md
          done

      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: cross-browser-test-report
          path: test-summary.md
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Cross-Browser Test Results\n\n${summary}`
            });

  # Security and quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [accessibility-tests, cross-browser-core]
    if: always()
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts/

      - name: Check accessibility compliance
        run: |
          if [ ! -d "test-artifacts/accessibility-results" ]; then
            echo "❌ Accessibility tests failed to run"
            exit 1
          fi
          echo "✅ Accessibility tests completed"

      - name: Check core browser support
        run: |
          required_browsers=("chromium" "firefox" "webkit")
          for browser in "${required_browsers[@]}"; do
            if [ ! -d "test-artifacts/core-test-results-${browser}" ]; then
              echo "❌ Core tests failed for ${browser}"
              exit 1
            fi
          done
          echo "✅ Core browser support verified"

      - name: Performance threshold check
        run: |
          # This would typically parse JUnit XML or JSON results
          # For now, just check that performance tests ran
          if [ ! -d "test-artifacts/performance-results-chromium" ]; then
            echo "⚠️ Performance tests missing, but not blocking"
          else
            echo "✅ Performance tests completed"
          fi

      - name: Set overall status
        run: |
          echo "✅ All quality gates passed"
          echo "🎯 Educational Dashboard is ready for cross-browser deployment"